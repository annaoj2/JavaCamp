Courtesy of Foothill CS classes.
Uses: loops, user input, functions 

Write a program that does the following: 
- Prompts the user for how many frozen yogurts they want to buy 
- Keeps a running tab of how many credits the user has
- 1 froyo purchased = 1 credit
- when the user has 10 or more credits, asks the user whether they would like to buy or use their credits.
- if they use credits, every 10 credits gets them a free froyo. 

Example. 

Do you want froyo? Y
How many froyos do you want to buy? 4 
You have bought 4 froyos and you have 4 credits.
 
Do you want froyo? Y
How many froyos do you want to buy? 5
You have bought 5 froyos and you have 9 credits. 

Do you want froyo? Y
How many froyos do you want to buy? 3
You have bought 3 froyos and you have 12 credits. 

Do you want froyo? Y 
Do you want to buy (B) froyos or use credits (C)? C
You have received one free froyo and your balance is 2 credits. 

Do you want froyo? N 
(exit program)

Suggested order for building your program: 
0. You will want a while loop to keep running the program until the answer is no. Don't worry about getting input from the user yet; just make sure your loop works with a predetermined value. Use an "i" variable so that when i gets to some value, say 4, you change the answer to "no". Make sure to make a change to avoid an infinite loop.
What kind of variable should the answer be? 

1. Now get input from the user. 

2. Add a variable to keep track of credits. Ask the user how many froyo they want to buy. Build functionality to keep adding to credits. Don't worry about using credits yet. 

3. Output necessary statements to the user giving their balance so that you can check credits and make sure it's working. 

4. Add a user prompt to ask if they want to buy or use credits. 

5. Build functionality to redeem credits by subtracting 10 credits if they choose that option. Then add in the message to the user telling them they got a free froyo and how many credits they have left. Hint: easier to make buying frozen yogurt its own function. 

6. Optional: build error checking so that if a user enters values other than Y or N, it re-prompts the user for a valid answer. 

7. Optional: build similar checks like item 6 for the buy vs. credit options. 
